#include "epubgenerator.h"

EpubGenerator::EpubGenerator()
{

}

void EpubGenerator::generate()
{
    QDir dir("/tmp/epub/");
    QStringList list = dir.entryList();
    foreach(QString file, list)
        dir.remove(file);

    if(dir.exists("/tmp/epub/META-INF")){
        dir.cd("/tmp/epub/META-INF");
        list = dir.entryList();
        foreach(QString file, list)
            dir.remove(file);
    }

    //Mkdir '/tmp/epub/META-INF'
    dir.mkpath("/tmp/epub/META-INF");

    QFile::remove("/tmp/tabz.epub");

    //Generate pages
    generatePages();

    //Generate 'content.opf'
    generateContent();

    //Generate 'titlepage.xhtml'
    generateTitlePage();

    //Generate 'stylesheet.css'
    //generateStyleSheet();

    //Generate 'mimetype'
    generateMimetype();

    //Generate 'toc.ncx'
    generateToc();

    //Generate 'META-INF/container.xml'
    generateContainer();

    QProcess process;
    process.setWorkingDirectory("/tmp/epub/");

    //Compress files in zip
    //QProcess process(zip_exec + arg + filename);
    process.start("zip -r /tmp/tabz.zip .");
    process.waitForFinished();

    //Rename zip into epub
    QFile::rename("/tmp/tabz.zip","/tmp/tabz.epub");
}

void EpubGenerator::generateContent()
{
    QFile file("/tmp/epub/content.opf");
    file.open(QFile::WriteOnly);
    QTextStream stream(&file);

    stream << "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\" ?>\n";
    stream << "<package xmlns=\"http://www.idpf.org/2007/opf\" unique-identifier=\"BookId\" version=\"2.0\">\n";
    stream << "    <metadata xmlns:dc=\"http://purl.org/dc/elements/1.1/\" xmlns:opf=\"http://www.idpf.org/2007/opf\">\n";
    stream << "        <dc:identifier id=\"BookId\" opf:scheme=\"UUID\">urn:uuid:30d28590-b1f3-419c-8f8b-56e3748621f9</dc:identifier>\n";
    stream << "    </metadata>\n";
    stream << "    <manifest>\n";
    stream << "        <item href=\"toc.ncx\" id=\"ncx\" media-type=\"application/x-dtbncx+xml\"/>\n";
    //stream << "        <item href=\"cover.jpg\" id=\"cover\" media-type=\"image/jpeg\"/>");
    stream << "        <item href=\"titlepage.xhtml\" id=\"titlepage.xhtml\" media-type=\"application/xhtml+xml\"/>\n";
    stream << "    </manifest>\n";
    stream << "    <spine toc=\"ncx\">\n";
    stream << "        <itemref idref=\"titlepage.xhtml\"/>\n";
    stream << "    </spine>\n";
    stream << "</package>";

    file.close();
}

void EpubGenerator::generateMimetype()
{
    QFile file("/tmp/epub/mimetype");
    file.open(QFile::WriteOnly);
    QTextStream stream(&file);

    stream << "application/epub+zip";

    file.close();
}

void EpubGenerator::generateStyleSheet()
{
    QFile file("/tmp/epub/stylesheet.css");
    file.open(QFile::WriteOnly);
    QTextStream stream(&file);

    stream << "";

    file.close();
}

void EpubGenerator::generateTitlePage()
{
    QPixmap pix(464,747);
    pix.fill(Qt::red);
    pix.save("/tmp/epub/cover.jpg");

    QFile file("/tmp/epub/titlepage.xhtml");
    file.open(QFile::WriteOnly);
    QTextStream stream(&file);

    stream << "<?xml version='1.0' encoding='utf-8'?>\n";
    stream << "<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\">\n";
    stream << "    <head>\n";
    stream << "        <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"/>\n";
    stream << "        <meta name=\"calibre:cover\" content=\"true\"/>\n";
    stream << "        <title>Cover</title>\n";
    stream << "        <style type=\"text/css\" title=\"override_css\">\n";
    stream << "            @page {padding: 0pt; margin:0pt}\n";
    stream << "            body { text-align: center; padding:0pt; margin: 0pt; }\n";
    stream << "        </style>\n";
    stream << "    </head>\n";
    stream << "    <body>\n";
    stream << "        <h1>"+title_+"</h1>\n";
    stream << "        <div>\n";
    //stream << "            <svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" version=\"1.1\" width=\"100%\" height=\"100%\" viewBox=\"0 0 464 747\" preserveAspectRatio=\"xMidYMid meet\">\n";
    //stream << "                <image width=\"464\" height=\"747\" xlink:href=\"cover.jpg\"/>\n";
    //stream << "            </svg>\n";
    stream << "        </div>\n";
    stream << "     Generated by TabZ\n";
    stream << "    </body>\n";
    stream << "</html>";
    file.close();
}

void EpubGenerator::generateToc()
{
    QFile file("/tmp/epub/toc.ncx");
    file.open(QFile::WriteOnly);
    QTextStream stream(&file);

    stream << "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n";
    stream << "<!DOCTYPE ncx PUBLIC \"-//NISO//DTD ncx 2005-1//EN\"\n";
    stream << "   \"http://www.daisy.org/z3986/2005/ncx-2005-1.dtd\">\n";
    stream << "<ncx xmlns=\"http://www.daisy.org/z3986/2005/ncx/\" version=\"2005-1\">\n";
    stream << "<head>\n";
    stream << "   <meta name=\"dtb:uid\" content=\"urn:uuid:30d28590-b1f3-419c-8f8b-56e3748621f9\" />\n";
    stream << "   <meta name=\"dtb:depth\" content=\"0\" />\n";
    stream << "   <meta name=\"dtb:totalPageCount\" content=\"0\" />\n";
    stream << "   <meta name=\"dtb:maxPageNumber\" content=\"0\" />\n";
    stream << "</head>\n";
    stream << "<docTitle>\n";
    stream << "   <text>Unknown</text>\n";
    stream << "</docTitle>\n";
    stream << "<navMap>\n";
    stream << "<navPoint id=\"navPoint-1\" playOrder=\"1\">\n";
    stream << "  <navLabel>\n";
    stream << "    <text>DÃ©marrer</text>\n";
    stream << "  </navLabel>\n";
    stream << "  <content src=\"Text/Section0001.xhtml\" />\n";
    stream << "</navPoint>\n";
    stream << "</navMap>\n";
    stream << "</ncx>";
    file.close();
}

void EpubGenerator::generateContainer()
{
    QFile file("/tmp/epub/META-INF/container.xml");
    file.open(QFile::WriteOnly);
    QTextStream stream(&file);

    stream << "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n";
    stream << "<container version=\"1.0\" xmlns=\"urn:oasis:names:tc:opendocument:xmlns:container\">\n";
    stream << "    <rootfiles>\n";
    stream << "        <rootfile full-path=\"content.opf\" media-type=\"application/oebps-package+xml\"/>\n";
    stream << "   </rootfiles>\n";
    stream << "</container>";

    file.close();
}

void EpubGenerator::generatePages()
{

}
